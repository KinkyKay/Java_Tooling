The Document Type Definition (DTD) was the only way of constraining an XML document.
From the 21st century, a more sophisticated standard emerged: the XML Schema.
Now days the XML Schema is the official standard for validating XML documents.

$$ Problems with DTD:
    - different syntax (from SGML)
    - programmatic processing of their metadata is difficult
    - not extensible
    - no support datatypes
    - no support inheritance

$$ Advantages of XML Schema:
    - uses XML syntax
    - element and attribute definitions are possible
    - open content models can be defined
    - greater flexibility for content models
    - provide a richer set of datatypes
    - allow built-in and user-defined datatypes to be created

$$ XML Schema specification:
    There are three parts, there is the primer, which introduces the key topics in schemas,
    and two reference sections: structures and datatypes.
    Datatypes are the basic building blocks.
    Structures are more like the compounds and are used to describe the element, attribute
    and validation structure of a document type.

$$ Basic syntax elements:
    - Schemas begin with the <schema> tag.
      The xmlns attribute defines the namespace for schemas. This means that the language for
      defining schemas uses the predefined tags of that namespace.
      Example:
            <?xml version="1.0" encoding="UTF-8"?>
            <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                ...
            </xsd:schema>

    - Elements and attributes must be defined in a structure.
      Elements are defined with attributes on the element tag.
            type        specifies the element type
            minOccurs   specifies the number of occurrences of the element in this model.
                        0 makes the element optional. Default is 1.
            maxOccurs   maximum number of occurrences of the element in this model.
                        'Unbounded' means any number of times. Default is 1.
      Example:
            <xsd:element name="title" type="xsd:string" minOccurs="0"/>

    - Defining an attribute
      Attributes are defined with attributes on the attribute tag:
            name        Attribute name
            default     default value
            use         whether this is a "required" or "optional" attribute
      Example:
            <xsd:attribute name="countrycode" type="xsd:string" use="required"/>

$$ Example of a Schema:
    - The www.w3.org/2001/XMLSchema namespace is used for identifying the Schema itself.
    - The www.w3.org/2001/XMLSchema-instance namespace is used for Schema extensions in documents
    - The element xsi:noNamespaceSchemaLocation defines the location of a W3C Schema without a target namespace.

$$ Defining structure of a schema:
    The element and attribute tags must be combined to define the structure. There are three well known schema
    design 'patterns', which are often combined:
    1. Russian Doll Design or local components/definitions
        The Russian Doll Design tightly follows the structure of an XML document. One of the key features is to
        define each element and attribute within its context.
        Example: RussianDollDesign.xsd
    2. Salami Slice or global components
        The elements and attributes are defined separately and are reffered to, to build up the structure.
        Example: SalamiSlice.xsd
    3. Venetian Blind or global types
        Complex and simple (data)types are made and used to define the elements.
        Example: VenitianBlind.xsd

$$ Compositors:
    1. Sequence:
        The xs: sequence compositor defines ordered groups of elements. The order in the XML document must be the
        same as the order in which the elements appear in the schema.
        Example: Sequence.xsd
    2. Choice:
        The choice compositor describes a choice between several possible elements or groups of elements.
        Example: country.xml - country.xsd
    3. All:
        All defines an unordered set of elements. The elements can appear in any order but there are a few restrictions:
        - the elements can appear only as unique children at the top of a content model.
        - their children can be only xsd:element definitions or references and cannot have a cardinality greater than one.

$$ Groups:
    Example: groups.xsd
    A group is a definition that contains elements or attributes. They are containers holding a set of elements or
    attributes that can be used to describe complex types.

$$ Types:
    - ComplexTypes = with elements and/or attributes:
            * simple content (Example: SimpleContent.xsd)
                + only text nodes (no children)
                + can be extended (with attributes)
            * mixed content: elements and text (MixedContent.xsd)
      Example empty content elements: Empty.xsd


    - SimpleTypes = no elements, no attributes:
            * primitive data types (xs:string, xs:date,...)
            * derived data types:
                + derived from the primitive data types by restriction, union, list
                + facets: maxLength, enumeration, pattern
      Example: SimpleTypes.xml

    - Warning:
            * elements default type = xs:anyType
            * attributes default type = xs:anySimpleType

$$ Contraints:
    1. Unique constraints
        The first is declared with the xs:unique element. The two paths defined in the uniqueness
        constraint are evaluated relative to the context node.
        The first path is defined by the selector element. The purpose is to define the element which
        has the uniqueness constraint.
        The second path, specified in the xs:field element is evaluated relative to the element identified
        by the xs:selector, and can be an element or an attribute node.
        Example: CountryUniqueConstraints.xml - CountryUniqueConstraints.xsd

    2. Key constraints

    






