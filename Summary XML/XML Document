$$ Syntactic Constructs:
    - Text strings (unicode)
    - Markup and data
    - Case-sensitivity
    - White space: tab, spaces, CR, LF,...
    - Names:
        * unicode
        * no space
        * start with A-Z, a-z, _ , :

$$ Documents Nodes:
    A Document node is a complete document, including the XML Declaration. All XML documents
    may (and should!) begin with a single XML declaration.
    The document root of each XML document is also the point of attachment for the document's
    description using a DTD or Schema.

$$ Document fragments:
    A document fragment is a part of a document that might or might not be well formed. It
    can be a group of elements with no root element.

$$ Document types:
    An XML document may contain a DOCTYPE declaration. It contains information that tells the
    processor about the Document Type Definition (DTD). The first argument refers to the root
    element of the XML document. These two must match because the DTD can describe only specific
    structures.
    Example: DocTypeExample.xml

$$ Document types - PUBLIC:
    The PUBLIC identifier is used to reference a DTD. A DTD is outdated and replaced by XML.
    Example: DocTypePublicExample.xml

$$ Document types - SYSTEM:
    An XML parser may try to generate a URI using the PUBLIC identifier. If it is unable eo do so,
    the SYSTEM identifier may be used.
    Example: DocTypeSystemExample.xml

$$ Elements:
    - Root Element (Document Element) Example: IntroducingXML.xml => <personList>
    - Child Elements (descendants) Example: IntroducingXML.xml => <person>
    - Empty Element Example: <middleName></middleName>

$$ Attributes:
    - can contain extra information of your element
    - metadata
    Example: Attributes.xml

$$ Text:
    Any text within another node is a text node. white space characters have no significance in between
    elements so that an entire document could be on a single line.
    Example: Text.xml

$$ Entities, Entity references and Notations
    - Character entity references:
            &#169;   => displays the copyright symbol
            &#8364;  => displays the euro sign
    - Entity references:
            &amp;    => displays &
            &lt;     => displays <
            &gt;     => displays >
            &apos;   => displays '
            &quot;   => displays "

$$ Processing Instructions (PI's), comments and CDATA Sections
    - PI : A PI allows us to leave specific instructions for an specific processor/program.
            Example: <?Dumb-Formatter FONT="16pt"?>

    - comments:
            Example: <!--This is the way to have comments in your XML or DTDs-->

    - CDATA: CDATA sections are a method of including text that contains characters that would otherwise be
             recognized as mark-up.
             Example: <![CDATA[John&Mary's kids: <name>Rick</name>&<name>Jane</name> ]]>
